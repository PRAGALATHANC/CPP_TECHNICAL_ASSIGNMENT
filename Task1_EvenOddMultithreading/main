// task1_odd_even.cpp

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

std::mutex mtx;
std::condition_variable cv;
int number = 0;
const int MAX_NUM = 10;
bool even_turn = true; // true if it's even's turn

void print_even() {
    while (number <= MAX_NUM) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return even_turn; });
        if (number % 2 == 0 && number <= MAX_NUM) {
            std::cout << "Even: " << number << std::endl;
            ++number;
            even_turn = false; // switch to odd thread
            cv.notify_all();
        }
    }
}

void print_odd() {
    while (number < MAX_NUM) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return !even_turn; });
        if (number % 2 == 1 && number < MAX_NUM) {
            std::cout << "Odd: " << number << std::endl;
            ++number;
            even_turn = true; // switch to even thread
            cv.notify_all();
        }
    }
}

int main() {
    std::thread t1(print_even);
    std::thread t2(print_odd);

    t1.join();
    t2.join();

    return 0;
}
