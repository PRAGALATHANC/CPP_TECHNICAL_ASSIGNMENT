#include <opencv2/opencv.hpp>
#include <ctime>
#include <iostream>
#include <string>
#include <sstream>

// Generate a unique filename for video or image based on current timestamp
std::string generateFileName(char fileType)
{
    std::time_t rawTime = std::time(0);
    std::tm* timeInfo = std::localtime(&rawTime);

    int year = timeInfo->tm_year + 1900;
    int month = timeInfo->tm_mon + 1;
    int day = timeInfo->tm_mday;
    int hour = timeInfo->tm_hour;
    int minute = timeInfo->tm_min;
    int second = timeInfo->tm_sec;

    std::ostringstream fileName;
    fileName << (fileType == 'v' ? "MYVIDEO" : "MYPICTURE")
             << year 
             << (month < 10 ? "0" : "") << month
             << (day < 10 ? "0" : "") << day
             << (hour < 10 ? "0" : "") << hour
             << (minute < 10 ? "0" : "") << minute
             << (second < 10 ? "0" : "") << second
             << (fileType == 'v' ? ".mp4" : ".jpg");

    return fileName.str();
}

int main()
{
    cv::VideoCapture webcam(0);

    if (!webcam.isOpened())
    {
        std::cout << "Error: Webcam could not be accessed!" << std::endl;
        return -1;
    }

    cv::Mat videoFrame;
    bool isRecording = false;
    cv::VideoWriter myVideoWriter;

    while (true)
    {
        webcam >> videoFrame;
        cv::flip(videoFrame, videoFrame, 1);

        char key = cv::waitKey(1);
        if (key == 'q')
            break;

        if (key == 's')
        {
            if (!isRecording)
            {
                std::string videoFileName = generateFileName('v');
                int width = webcam.get(cv::CAP_PROP_FRAME_WIDTH);
                int height = webcam.get(cv::CAP_PROP_FRAME_HEIGHT);
                std::cout << "\nFrame Rate: " << webcam.get(cv::CAP_PROP_FPS) << std::endl;
                myVideoWriter.open(videoFileName, cv::VideoWriter::fourcc('M', 'J', 'P', 'G'), 10, cv::Size(width, height));

                if (!myVideoWriter.isOpened())
                {
                    std::cout << "Error: Failed to start video recording." << std::endl;
                    myVideoWriter.release();
                }
                else
                {
                    isRecording = true;
                    std::cout << "\nVIDEO RECORDING STARTED.\n";
                }
            }
        }
        else if (key == 'b')
        {
            if (isRecording) {
                myVideoWriter.release();
                isRecording = false;
                std::cout << "VIDEO RECORDING STOPPED.\n";
            }
        }
        else if (key == 'c')
        {
            std::string imageFileName = generateFileName('i');
            if (cv::imwrite(imageFileName, videoFrame))
                std::cout << "\nSnapshot saved: " << imageFileName << std::endl;
            else
                std::cout << "\nError: Failed to save snapshot.\n";
        }

        if (isRecording)
        {
            myVideoWriter.write(videoFrame);
            std::cout << "\n[RECORDING]\n";
            cv::circle(videoFrame, cv::Point(20, 50), 10, cv::Scalar(0, 0, 255), cv::FILLED);
            cv::circle(videoFrame, cv::Point(20, 50), 15, cv::Scalar(0, 0, 255), 2);
            cv::putText(videoFrame, "Recording", cv::Point(40, 60), cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 0, 255), 1);
        }

        cv::imshow("My Webcam", videoFrame);
    }

    webcam.release();
    cv::destroyAllWindows();

    return 0;
}
